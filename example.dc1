// example.dc1
//
// Note: include rom.map file as preamble source code.
//
// A no-op "instruction"
// The emulator stops on no-op and other invalid instructions
//
NOOP==XFFFE
CLOCK==X7C00

ALP, =XA000
L1ENTRY:
BEGIN
   SETT   T1SPACE,P

   // Set up T0 register
   SETR   T0REG,P
   SETA   T0SPACE,P
   STRA   0,R

   // Set up P0 register
   SETR   P0REG,P
   SETA   P0START,P
   STRA   0,R

   // Set up clock
   SETR   ACLOCK,P
   SETA   0,L
   STRA   0,R       // Ensure stopped
   SETA   50,L      // mSec
   STRA   2,R       // Set the interrupt time interval
   SETA   1,L
   STRA   0,R       // Start the clock
RESUMEL0:           // Resume level 0
   SETL   0
INTERRUPT:
   JS     AINTHANDLER,I   
   J      RESUMEL0

T1SPACE:
   =E =X6800
T0REG:
   =E =X7F0A
T0SPACE:
   =E =X6000
P0REG:
   =E =X7F02
P0START:
   =E L0ENTRY
ACLOCK:
   =E CLOCK

AINTHANDLER:
   =E  INTHANDLER
END

// Count 20 interrupts, i.e. 1 Sec and set TICKFLAG
//
INTHANDLER:
BEGIN
TSIZE=2
   STRS  0,T
   ADDT  TSIZE,L

   SETA  COUNTER,P
   ADDA  1,L
   CMPA  20,L
   JLT   SKIP
   SETR  1,L
   STRR  TICKFLAG,P
   SETA  0,L
SKIP:
   STRA  COUNTER,P
   SUBT  TSIZE,L
   J     0,TI
COUNTER:
   =E 0
END

TICKFLAG:
   =E 0

L0ENTRY:
BEGIN
TSIZE=2
   ADDT   TSIZE,L
LOOP:
   // Busy wait until TICKFLAG set.
   SETA   TICKFLAG,P
   CMPA   1,L
   JNE    LOOP

   // Clear flag
   SETA   0,L
   STRA   TICKFLAG,P  

   JS     UPDATE

   SUBT   TSIZE,L
   J      L0ENTRY
END

// Binary time: hours, minutes and seconds.
//
BINTIME:
  =E 0
  =E 0
  =E 0

UPDATE:
BEGIN
HRS=0
MINS=2
SECS=4

TSIZE=6
TENS=-4
UNITS=-2

   STRS  0,T
   ADDT  TSIZE,L
   SETR  ABINTIME,P

   // Seconds
   SETA  SECS,R
   ADDA  1,L
   CMPA  60,L
   JGE   CARRY1
   STRA  SECS,R
   J     DONE

CARRY1:
   SETA  0,L
   STRA  SECS,R

   // Minutes
   SETA  MINS,R
   ADDA  1,L
   CMPA  60,L
   JGE   CARRY2
   STRA  MINS,R
   J     DONE

CARRY2:
   SETA  0,L
   STRA  MINS,R

   // Hours
   SETA  HRS,R
   ADDA  1,L
   CMPA  24,L
   JLT   NOCARRY
   SETA  0,L
NOCARRY:
   STRA  HRS,R


DONE:
   // Time updated, set update text string
   // Hours
   SETS  ABINTIME,P
   SETA  HRS,S
   SETR  10,L
   JS    ADIVREM,I
   STRA  TENS,T
   STRR  UNITS,T

   SETS  ANUMBERS,P
   ADDS  TENS,T
   SETA  0,SB
   SETS  ATHETIME,P
   STRA  HOFFSET,SB

   SETS  ANUMBERS,P
   ADDS  UNITS,T
   SETA  0,SB
   SETS  ATHETIME,P
   STRA  HOFFSET+1,SB

   // Mins
   SETS  ABINTIME,P
   SETA  MINS,S
   SETR  10,L
   JS    ADIVREM,I
   STRA  TENS,T
   STRR  UNITS,T

   SETS  ANUMBERS,P
   ADDS  TENS,T
   SETA  0,SB
   SETS  ATHETIME,P
   STRA  MOFFSET,SB

   SETS  ANUMBERS,P
   ADDS  UNITS,T
   SETA  0,SB
   SETS  ATHETIME,P
   STRA  MOFFSET+1,SB

   // Seconnds
   SETS  ABINTIME,P
   SETA  SECS,S
   SETR  10,L
   JS    ADIVREM,I
   STRA  TENS,T
   STRR  UNITS,T

   SETS  ANUMBERS,P
   ADDS  TENS,T
   SETA  0,SB
   SETS  ATHETIME,P
   STRA  SOFFSET,SB

   SETS  ANUMBERS,P
   ADDS  UNITS,T
   SETA  0,SB
   SETS  ATHETIME,P
   STRA  SOFFSET+1,SB

   // Output
   //
   SETA  ATHETIME,P
   SETR  VDUOUT,P
   JS    APUTBYTES,I

   SUBT  TSIZE,L
   J     0,TI

ABINTIME:
   =E BINTIME
ADIVREM:
   =E DIVREM
ATHETIME:
   =E THETIME
ANUMBERS:
   =E NUMBERS
VDUOUT:
   =E =X7B14
APUTBYTES:
   =E PUTBYTES

DATA
HOFFSET=12
MOFFSET=15
SOFFSET=18

// Naughty - storing in program space ;-)
//
THETIME:
   =C"The time is 00:00:00"
   =X0D0A00
NUMBERS:
   =C"0123456789"

ALP
END

FINISH, L1ENTRY;

// end
